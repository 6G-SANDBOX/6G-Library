---
- name: "STAGE 1: Prepare to access a previous target component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips'][site_networks_id.default | string] }}"
        tn_routemanager_token: "{{ (terraform_outputs.stdout | from_json)['tn_routemanager_token'] }}"
        open5gs_metadata: "{{ (terraform_outputs.stdout | from_json)[any_iswireless_radio_linked_5gcore + '-metadata'] }}"

    - name: Set start of lease time and date with RFC 3339 section 5.6 format
      ansible.builtin.set_fact:
        start_time: "{{ any_iswireless_radio_start_time | default(lookup('pipe', 'date -u +\"%Y-%m-%dT%H:%M:%SZ\"'), true) }}"

    - name: Set end of lease time and date with RFC 3339 section 5.6 format
      ansible.builtin.set_fact:
        stop_time: "{{ lookup('pipe', 'date -u -d \"' ~ start_time ~ ' + ' ~ any_iswireless_radio_duration ~ ' seconds\" +\"%Y-%m-%dT%H:%M:%SZ\"') }}"

    - name: Submit routes in route-manager-api from the ISWIRELESS RADIO the 5G Core
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/routemanager_add.yaml"
      vars:
        endpoint: "{{ site_iswireless_routemanager.api_endpoint }}"
        token: "{{ site_iswireless_routemanager.token }}"
      loop:
        - { to: "{{ open5gs_metadata['amf_n2_ip'] }}", via: "{{ bastion_ip }}" }
        - { to: "{{ open5gs_metadata['upf_n3_ip'] }}", via: "{{ bastion_ip }}" }

    - name: Submit routes in tn_bastion from the Trial Network to the ISWIRELESS Radio
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/routemanager_add.yaml"
      vars:
        endpoint: "{{ bastion_ip }}"
        token: "{{ tn_routemanager_token }}"
      loop:
        - { to: "{{ site_available_components.iswireless_radio.cp_ip }}", via: "{{ site_iswireless_routemanager.api_endpoint }}" }
        - { to: "{{ site_available_components.iswireless_radio.up_ip }}", via: "{{ site_iswireless_routemanager.api_endpoint }}" }


- name: "STAGE 2: Prepare access to tn_bastion to allow access"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Add the bastion to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "bastion"
        ansible_host: "{{ bastion_ip }}"
        ansible_user: "jenkins"

- name: "STAGE 3: Access tn_bastion to set firewall exceptions"
  hosts: bastion
  gather_facts: false
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Write firewall exception for the route-manager-api of your site
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/nftables_add.yaml"
      vars:
        fw_exceptions:
          - "{{ site_iswireless_routemanager.api_endpoint }}"


- name: "STAGE 4: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Set custom terraform outputs for future components
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
      vars:
        custom_outputs:
          - key: "{{ entity_name }}-open5gs"
            value: "{{ any_iswireless_radio_linked_5gcore }}"

    - name: Publish execution results to TNLCM and S3 object storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
