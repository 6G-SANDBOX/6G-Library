---
- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/prepare_terraform.yaml"
      vars:
        terraform_template: true

    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/.terraform/"
        state: "present"
        force_init: true
      failed_when: false
      register: component_apply


- name: "STAGE 2: Publish execution results"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false
      when: not component_apply.failed

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        id: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-id'] }}"
      when: not component_apply.failed

    - name: Merge all component component outputs into one "output" variable
      ansible.builtin.set_fact:
        output:
          id: "{{ id | b64encode }}"
      when: not component_apply.failed

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/publish_results.yaml"

    - name: Upload markdown info to S3 storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/s3_upload.yaml"
      when: not component_apply.failed
