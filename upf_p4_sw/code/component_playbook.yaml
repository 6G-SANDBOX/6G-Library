---
# Main playbook to deploy the UPF-P4 SW component

- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

#    - name: Set github_token as a fact
#      ansible.builtin.set_fact:
#        github_token: "{{ github_token }}" 

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Configure VM resources
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/vm_resources.yaml"

    - name: Terraform apply
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_apply.yaml"
 

- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Retrieve terraform outputs
      ansible.builtin.shell:
        args:
          chdir: "{{ workspace }}/.terraform/"
          cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
          executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips'][site_networks_id.default | string] }}"
        tn_ssh_public_key: "{{ (terraform_outputs.stdout | from_json)['tn_ssh_public_key'] }}"
        ips: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-ips'] }}"
        id: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-id'] }}"
        vnet_id: "{{ (terraform_outputs.stdout | from_json)[one_upf_p4_sw_networks[0] + '-id'] | string}}"

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ entity_name }}"
        ansible_host: "{{ ips[ vnet_id ] }}"
        ansible_ssh_common_args: "-J jenkins@{{ bastion_ip }}"
        ansible_user: "jenkins"

    - name: Add new VMs to SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/ssh_config.yaml"
      #loop: "{{ node_ips | dict2items }}"


- name: "STAGE 3: Apply CAC to prepare the component"
  hosts: "{{ hostvars['localhost']['entity_name'] }}"
  gather_facts: false
  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        timeout: 200

    - name: Set site ssh key as authorized in jenkins user
      ansible.posix.authorized_key:
        user: jenkins
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars['localhost'].get('site_admin_ssh_public_key', '') }}"
      when: item != ''

    - name: Create new user for experimenter access
      become: true
      ansible.builtin.user:
        name: tnuser
        shell: /bin/bash
        groups: sudo
        
    - name: Set TN ssh key as authorized in new user
      become: true
      ansible.posix.authorized_key:
        user: tnuser
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars['localhost']['tn_ssh_public_key'] }}"

    - name: UPF P4 SW install
      ansible.builtin.include_tasks: 
        file: "{{ workspace }}/{{ component_type }}/code/one/cac/02_install/upf_p4_install.yaml"


- name: "STAGE 4: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    # You can publish files to the MINIO S3 Storage
    #- name: Upload kubeconfig to S3
    #  amazon.aws.s3_object:
    #    endpoint_url: "{{ site_s3_server.endpoint }}"
    #    mode: put
    #    access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
    #    secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
    #    bucket: "{{ site_s3_server.bucket }}"
    #    object: "{{ tn_id }}/kconf-{{ entity_name }}.kubeconfig"
    #    src: "{{ workspace }}/{{ component_type }}/code/{{ entity_name }}.kubeconfig"
    #    encrypt: false
    #    validate_certs: false

    # Common task to create custom terraform outputs with information of interest for future deployments.
    # RAFA: My idea is to save the following outputs: N3 (UPF), N1-N2 (AMF) and N6 (UPF)
    - name: Publish node IDs and IPs as a terraform outputs"
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
      vars:
        custom_outputs:
          - key: "{{ entity_name }}-upf_ipv4_n3"
            value: "{{ one_upf_p4_sw_controller.upf_ipv4_n3 }}"
          - key: "{{ entity_name }}-upf_ipv4_n6"
            value: "{{ one_upf_p4_sw_controller.upf_ipv4_n6 }}"
          - key: "{{ entity_name }}-amf_ipv4_n2"
            value: "{{ one_upf_p4_sw_open5gs_amf.ngap_addr }}" 
                                                                                          
    # Necessary in most if not all components. Publishes the deployment information in the following order:
    # 1. Post the new terraform manifests to MINIO S3 Storage
    # 2. Generate markdown OK file with information about the component
    # 3. Post the markdown OK file to the MINIO S3 Storage
    # 4. Send a JSON OK notification to the TNLCM. JSON message also includes the markdown content.
    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
      vars:
        output:
          id: "{{ id | b64encode }}"
          ips: "{{ ips | b64encode }}"
          enb_ipv4_n3: "{{ one_upf_p4_sw_controller.enb_ipv4_n3 }}"
          dn_ipv4_n6: "{{ one_upf_p4_sw_controller.dn_ipv4_n6 }}"
          #node_ids: "{{ node_ids | b64encode }}"
          #node_ips: "{{ node_ips | b64encode }}"
          #kubeconfig: "{{ kubeconfig | b64encode }}"
          #skooner_token: "{{ hostvars[entity_name + '-master_0']['skooner_token']['stdout'] | b64encode }}"