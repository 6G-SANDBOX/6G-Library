# {{ tn_id }}-{{ entity_name }}

The component `{{ tn_id }}-{{ entity_name }}` has been succesfully created.

<p align="center">
  <a href="https://marketplace.opennebula.io/appliance/d6278d1b-66a4-4188-acd0-e2628296046e">
    <img src="https://marketplace.opennebula.io//logos/kubernetes.png" width="150" title="UERANSIM">
  </a>
</p>

The Kubernetes cluster has been deployed as a OneKE Service, with the *Skooner Dashboard* helm chart already deployed.
OneKE is a minimal hyperconverged Kubernetes platform that comes with OpenNebula out of the box.
It is based on RKE2 - Rancherâ€™s Next Generation Kubernetes Distribution with preinstalled components to handle persistence, ingress traffic, and on-prem load balancing.

OneKE Service has four different Roles:

* VNF: Load Balancer for Control-Plane and Ingress Traffic
* Master: Control-Plane nodes
* Worker: Nodes to run application workloads
* Storage: Dedicated storage nodes for Persistent Volume replicas

<img src="https://docs.opennebula.io/6.6/_images/oneke-architecture.png" />

## Important information:

- **OneKE public VNET**: `{{ one_oneKE_external_vnet }}`
- **OneKE private VNET**: `{{ one_oneKE_internal_vnet }}`
- **CNI**: `{{ one_oneKE_cni_plugin }}`
{% if one_oneKE_cilium_range is defined and one_oneKE_cilium_range %}
- **cilium IP pool**: `{{ one_oneKE_cilium_range }}`
{% endif %}
- **multus enabled**: `{{ one_oneKE_multus }}`
- **metallb enabled**: `{{ one_oneKE_metallb }}`
- **metallb IP pool**: `{{ one_oneKE_metallb_range }}`
- **traefik enabled**: `{{ one_oneKE_traefik }}`
- **VNF upstream DNS**: `{{ one_oneKE_dns }}`
- **SSL/TLS passthrough enabled in the nginx-ingress**: `{{ one_oneKE_nginx_passthough }}`
- **Skooner Dashboard URL**: `skooner.{{ tn_id }}.{{ site_domain }}`
- **Skooner Dashboard token**: `{{ hostvars[entity_name + '-master_0']['skooner_token']['stdout'] }}`
- **base64 encoded KubeConfig file**:
  ```
  {{ kubeconfig }}
  ```

**NOTE**: If you need detailed information about OneKE you can visit the official documentation: https://github.com/OpenNebula/one-apps/wiki/oneke_ops#operating-oneke

**NOTE**: The validity of the Skooner Dashboard token is ten years from now. If you need to create another one, use this command:
```
kubectl create token skooner-sa -n kube-system --duration=8760h
```
More info here: https://github.com/skooner-k8s/skooner



#### Accessing K8s API via SSH tunnels

By default Kubernetes API Server's extra SANs are set to `localhost,127.0.0.1` which allows you to access Kubernetes API via SSH tunnels.

> We recommend using the `ProxyCommand` SSH feature.

Use kubeconfig file at the bottom of this file:

> The `{{ node_ips.vnf_0 }}` is the **public** VNF address, `{{ node_ips.master_0 }}` is the **private** address of a master node inside the **private** VNET.

Create SSH tunnel, forward the `6443` TCP port:

```shell
$ ssh -o ProxyCommand='ssh -A root@{{ node_ips.vnf_0 }} -W %h:%p' -L 6443:localhost:6443 root@{{ node_ips.master_0 }}
```

and then run `kubectl` in another terminal:

```shell
$ kubectl get nodes
NAME                    STATUS   ROLES                       AGE    VERSION
oneke-ip-172-20-0-101   Ready    control-plane,etcd,master   58m    v1.27.2+rke2r1
oneke-ip-172-20-0-102   Ready    <none>                      52m    v1.27.2+rke2r1
oneke-ip-172-20-0-103   Ready    <none>                      52m    v1.27.2+rke2r1
oneke-ip-172-20-0-104   Ready    control-plane,etcd,master   31m    v1.27.2+rke2r1
oneke-ip-172-20-0-105   Ready    control-plane,etcd,master   29m    v1.27.2+rke2r1
```
