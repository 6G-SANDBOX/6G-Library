# {{ tn_id }}-{{ entity_name}}

A Kubernetes cluster han been created into the Trial Network {{ tn_id }}

The cluster has been deployed by OneKE Service. OneKE is a minimal hyperconverged Kubernetes platform that comes with OpenNebula out of the box.

OneKE is based on RKE2 - Rancherâ€™s Next Generation Kubernetes Distribution with preinstalled components to handle persistence, ingress traffic, and on-prem load balancing.

OneKE Service has four different Roles:

* VNF: Load Balancer for Control-Plane and Ingress Traffic
* Master: Control-Plane nodes
* Worker: Nodes to run application workloads
* Storage: Dedicated storage nodes for Persistent Volume replicas

<img src="https://docs.opennebula.io/6.6/_images/oneke-architecture.png" />

Important information about cluster configuration:

* **CLUSTER NAME**: {{ tn_id }}-{{ entity_name}}
* **PUBLIC VIRTUAL NET**: {{ one_oneKE_external_vnet }}
* **PRIVATE VIRTUAL NET**: {{ one_oneKE_internal_vnet }}
* **CNI**: {{ one_oneKE_cni_plugin }}
{% if one_oneKE_cilium_range is defined and one_oneKE_cilium_range %}
* **CILIUM IP POOL**: {{ one_oneKE_cilium_range }}
{% endif %}
* **MULTUS ENABLED**: {{ one_oneKE_multus }}
* **METALLB ENABLED**: {{ one_oneKE_metallb }}
* **METALLB IP POOL**: {{ one_oneKE_metallb_range }}
* **TRAEFIK ENABLED**: {{ one_oneKE_traefik }}
* **VNF UPSTREAM DNS**: {{ one_oneKE_dns }}

If you need detailed information about OneKE you can visit the official documentation: https://github.com/OpenNebula/one-apps/wiki/oneke_ops#operating-oneke


## Accessing K8s API via SSH tunnels

By default Kubernetes API Server's extra SANs are set to `localhost,127.0.0.1` which allows you to access Kubernetes API via SSH tunnels.

> We recommend using the `ProxyCommand` SSH feature.

Use kubeconfig file at the bottom of this file:

> The `{{ node_ips.vnf_0 }}` is the **public** VNF address, `{{ node_ips.master_0 }}` is the **private** address of a master node inside the **private** VNET.

Create SSH tunnel, forward the `6443` TCP port:

```shell
$ ssh -o ProxyCommand='ssh -A root@{{ node_ips.vnf_0 }} -W %h:%p' -L 6443:localhost:6443 root@{{ node_ips.master_0 }}
```

and then run `kubectl` in another terminal:

```shell
$ kubectl get nodes
NAME                    STATUS   ROLES                       AGE    VERSION
oneke-ip-172-20-0-101   Ready    control-plane,etcd,master   58m    v1.27.2+rke2r1
oneke-ip-172-20-0-102   Ready    <none>                      52m    v1.27.2+rke2r1
oneke-ip-172-20-0-103   Ready    <none>                      52m    v1.27.2+rke2r1
oneke-ip-172-20-0-104   Ready    control-plane,etcd,master   31m    v1.27.2+rke2r1
oneke-ip-172-20-0-105   Ready    control-plane,etcd,master   29m    v1.27.2+rke2r1
```

## base64 encoded KubeConfig File

```
{{ kubeconfig }}
```

## Skooner - Kubernetes Dashboard

You can access to your cluster skoone dashboard whith this url skooner.{{ tn_id }}.{{ site_domain }}

Skooner is the easiest way to manage your Kubernetes cluster.

- **Full cluster management**: Namespaces, Nodes, Pods, Replica Sets, Deployments, Storage, RBAC and more
- **Blazing fast and Always Live**: no need to refresh pages to see the latest cluster status
- **Quickly visualize cluster health at a glance**: Real time charts help quickly track down poorly performing resources

The token that you can use to access into the dashboard is:

```
{{ hostvars[entity_name + '-master_0']['skooner_token']['stdout'] }}
```

> The validity of this token is ten years from now. If you need to create another one, use this command:

```
kubectl create token skooner-sa -n kube-system --duration=8760h
```

More info here: https://github.com/skooner-k8s/skooner
