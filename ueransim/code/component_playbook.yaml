---
- name: "STAGE 1: Apply IaC to deploy the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Variable autocompletion
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/variable_autocompletion.yaml"

    - name: Terraform apply
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_apply.yaml"


- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips'][site_networks_id.default | string] }}"
        tn_ssh_public_key: "{{ (terraform_outputs.stdout | from_json)['tn_ssh_public_key'] }}"
        tn_dns_token: "{{ (terraform_outputs.stdout | from_json)['tn_dns_token'] }}"
        ips: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-ips'] }}"
        id: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-id'] }}"
        access_vnet_id: "{{ (terraform_outputs.stdout | from_json)[one_ueransim_networks[0] + '-id'] | string }}"
        domain_name: >-
          {{
            (
              (component_type  | regex_replace('_', '') | lower) ~ '-' ~
              (custom_name     | regex_replace('_', '') | lower) ~ '.' ~
              (tn_id           | regex_replace('_', '') | lower) ~ '.' ~
              site_domain
            ) | trim
          }}

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "ueransim"
        ansible_host: "{{ ips[access_vnet_id] }}"
        ansible_ssh_common_args: "-J jenkins@{{ bastion_ip }}"
        ansible_user: "jenkins"

    - name: Add new VM to SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/jenkins_ssh_config.yaml"

    - name: Add new VM to an SSH config file ment to be usable by the experimenter
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tnuser_ssh_config.yaml"


- name: "STAGE 3: Apply CaC to prepare the component"
  hosts: "ueransim"
  gather_facts: false
  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        timeout: 200

    - name: Wait again until one-appliance contextualization scripts have finished
      become: true
      ansible.builtin.wait_for:
        path: /etc/one-appliance/status
        search_regex: bootstrap_success

    - name: Set site ssh key as authorized in jenkins user
      ansible.posix.authorized_key:
        user: jenkins
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars.localhost.get('site_admin_ssh_public_key', '') }}"
      when: item != ''

    - name: Create new user for experimenter access
      become: true
      ansible.builtin.user:
        name: tnuser
        shell: /bin/bash
        groups: sudo
        password: ''
    - name: Set TN ssh key as authorized in new user
      become: true
      ansible.posix.authorized_key:
        user: tnuser
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars.localhost.tn_ssh_public_key }}"


- name: "STAGE 4: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Set DNS record for the component
      ansible.builtin.uri:
        url: >-
          {{
            'http://' ~ bastion_ip ~ ':5380/api/zones/records/add?token=' ~ tn_dns_token ~
            '&domain=' ~ domain_name ~
            '&type=A&ptr=true&createPtrZone=true&ipAddress=' ~ ips[access_vnet_id] | trim
          }}
        method: POST
        body_format: json
        status_code: [200]

    - name: Set custom terraform outputs for future components
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
      vars:
        custom_outputs:
          - key: "{{ entity_name }}-mode"
            value: "{{ one_ueransim_mode }}"

    - name: Tasks for UERANSIM as gNB
      when: one_ueransim_mode in ['gnb', 'both']
      block:
        - name: Define gnb_metadata dictionary
          ansible.builtin.set_fact:
            gnb_metadata_dict: >-
              {
                'run_gnb':        '{{ one_ueransim_run_gnb }}',
                'linked_open5gs': '{{ one_ueransim_gnb_linked_open5gs | default('None') }}',
                'amf_n2_ip': '{{ one_ueransim_gnb_amf_n2_ip }}',
                'tac':  '{{ one_ueransim_gnb_tac }}',
                'mcc':  '{{ one_ueransim_gnb_mcc }}',
                'mnc':  '{{ one_ueransim_gnb_mnc }}',
                'msin': '{{ one_ueransim_gnb_msin }}',
                'key':  '{{ one_ueransim_gnb_key }}',
                'opc':  '{{ one_ueransim_gnb_opc }}',
                'apn':  '{{ one_ueransim_gnb_apn }}',
                'sst':  '{{ one_ueransim_gnb_slices_sst }}',
                'sd':   '{{ one_ueransim_gnb_slices_sd }}'
              }
        - name: Set custom terraform outputs for future components
          ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
          vars:
            custom_outputs:
              - key: "{{ entity_name }}-gnb_metadata"
                value: "{{ gnb_metadata_dict }}"

    - name: Tasks for UERANSIM as UE
      when: one_ueransim_mode in ['ue', 'both']
      block:
        - name: Define ue_metadata dictionary
          ansible.builtin.set_fact:
            ue_metadata_dict: >-
              {
                'run_ue':        '{{ one_ueransim_run_ue }}',
                'linked_gnb':    '{{ one_ueransim_ue_linked_gnb | default('None') }}',
                'gnbsearchlist': '{{ ips[access_vnet_id] if one_ueransim_ue_gnbsearchlist == 'localhost' else one_ueransim_ue_gnbsearchlist | join(',') }}',
                'mcc':  '{{ one_ueransim_ue_mcc }}',
                'mnc':  '{{ one_ueransim_ue_mnc }}',
                'msin': '{{ one_ueransim_ue_msin }}',
                'key':  '{{ one_ueransim_ue_key }}',
                'opc':  '{{ one_ueransim_ue_opc }}',
                'apn':  '{{ one_ueransim_ue_session_apn }}',
                'sst':  '{{ one_ueransim_ue_session_sst }}',
                'sd':   '{{ one_ueransim_ue_session_sd }}'
              }
        - name: Set custom terraform outputs for future components
          ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
          vars:
            custom_outputs:
              - key: "{{ entity_name }}-ue_metadata"
                value: "{{ ue_metadata_dict }}"

    - name: Publish execution results to TNLCM and S3 object storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
