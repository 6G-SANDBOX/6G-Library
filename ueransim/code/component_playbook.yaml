---
- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Overwrite defaults with correct values
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/variable_autocompletion.yaml"

    - name: Terraform apply
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_apply.yaml"

- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips'][site_networks_id.default | string] }}"
        ssh_public_key: "{{ (terraform_outputs.stdout | from_json)['ssh_public_key'] }}"
        ips: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-ips'] }}"
        id: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-id'] }}"
        vnet_id: "{{ (terraform_outputs.stdout | from_json)[one_ueransim_networks[0] + '-id'] | string}}"

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ entity_name }}"
        ansible_host: "{{ ips[ vnet_id ] }}"
        ansible_ssh_common_args: "-J {{ site_jenkins_ssh_user }}@{{ bastion_ip }}"
        ansible_user: "{{ site_jenkins_ssh_user }}"

    - name: Create SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/ssh_config.yaml"


- name: "STAGE 3: Apply CAC to prepare the component"
  hosts: "{{ hostvars['localhost']['entity_name'] }}"
  gather_facts: false
  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        delay: 20
        timeout: 180

    - name: Set site ssh key as authorized in jenkins user
      ansible.posix.authorized_key:
        user: "{{ hostvars['localhost']['site_jenkins_ssh_user'] }}"
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars['localhost']['site_admin_ssh_public_key'] }}"

    - name: Create new user for experimenter access
      become: true
      ansible.builtin.user:
        name: tnuser
        shell: /bin/bash
        groups: sudo

    - name: Set TN ssh key as authorized in new user
      become: true
      ansible.posix.authorized_key:
        user: tnuser
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars['localhost']['ssh_public_key'] }}"


- name: "STAGE 4: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Merge all component component outputs into one "output" variable
      ansible.builtin.set_fact:
        output:
          ips: "{{ ips | b64encode }}"
          id: "{{ id | b64encode }}"
          gnb_metadata_dict: {}
          ue_metadata_dict: {}

    - name: Tasks for UERANSIM as gNB
      when: one_ueransim_run_gnb == 'YES'
      block:
        - name: Define gnb_metadata dictionary
          ansible.builtin.set_fact:
            gnb_metadata_dict: >
              {
                'proxy': '{{ one_ueransim_gnb_proxy }}',
                'amf_address': '{{ one_ueransim_gnb_amf_address }}',
                'mcc': '{{ one_ueransim_gnb_mcc }}',
                'mnc': '{{ one_ueransim_gnb_mnc }}',
                'msin': '{{ terraform_outputs_open5gs_dict.msin }}',
                'key': '{{ terraform_outputs_open5gs_dict.key }}',
                'opc': '{{ terraform_outputs_open5gs_dict.opc  }}',
                'apn': '{{ terraform_outputs_open5gs_dict.apn }}',
                'tac': '{{ one_ueransim_gnb_tac }}',
                'sst': '{{ one_ueransim_gnb_slices_sst }}',
                'sd': '{{ one_ueransim_gnb_slices_sd }}',
                'gnb_address': '{{ ips[ vnet_id ] }}'
              }
        - name: Append gnb_metadata to the output
          ansible.builtin.set_fact:
            output: "{{ output | combine({'gnb_metadata_dict': gnb_metadata_dict | b64encode}) }}"

        - name: Publish gNB metadata as terraform outputs
          ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
          vars:
            custom_outputs:
              - key: "{{ entity_name }}-gnb_metadata"
                value: "{{ gnb_metadata_dict }}"

    - name: Tasks for UERANSIM as UE
      when: one_ueransim_run_ue == 'YES'
      block:
        - name: Define ue_metadata dictionary
          ansible.builtin.set_fact:
            ue_metadata_dict: >
              {
                'supi': '{{ one_ueransim_ue_supi }}',
                'mcc': '{{ one_ueransim_ue_mcc }}',
                'mnc': '{{ one_ueransim_ue_mnc }}',
                'key': '{{ one_ueransim_ue_key }}',
                'opc': '{{ one_ueransim_ue_op }}',
                'ngbSearchList': '{{ one_ueransim_ue_gnbSearchList }}',
                'apn': '{{ one_ueransim_ue_session_apn }}',
                'sst': '{{ one_ueransim_ue_session_sst }}',
                'sd': '{{ one_ueransim_ue_session_sd }}'
              }
        - name: Append ue_metadata to the output
          ansible.builtin.set_fact:
            output: "{{ output | combine({'ue_metadata_dict': ue_metadata_dict | b64encode}) }}"

        - name: Publish UE metadata as terraform outputs
          ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
          vars:
            custom_outputs:
              - key: "{{ entity_name }}-ue_metadata"
                value: "{{ ue_metadata_dict }}"

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
