# https://registry.terraform.io/providers/OpenNebula/opennebula/latest/docs/resources/virtual_machine
# https://docs.opennebula.io/6.8/management_and_operations/references/template.html#context-section
resource "opennebula_virtual_machine" "{{ entity_name }}" {
  name        = "{{ tn_id }}-{{ entity_name }}"
  template_id = {{ site_available_components.ueransim.template_id }}
  cpu         = {{ one_ueransim_cpu }}
  vcpu        = {{ one_ueransim_cpu }}
  memory      = {{ one_ueransim_memory }}

  context = {
    NETWORK = "YES"
    SET_HOSTNAME = "$NAME"
    USERNAME = "{{ site_jenkins_ssh_user }}"
    SSH_PUBLIC_KEY = "{{ site_jenkins_ssh_public_key }}"
    RUN_GNB = "{{ one_ueransim_run_gnb }}"
    RUN_UE = "{{ one_ueransim_run_ue }}"

    ONEKE_VNF = "{{ one_ueransim_gnb_proxy }}"
    GNB_MCC = "{{ one_ueransim_gnb_mcc }}"
    GNB_MNC = "{{ one_ueransim_gnb_mnc }}"
    GNB_TAC = "{{ one_ueransim_gnb_tac }}"
    GNB_AMF_ADDRESS = "{{ one_ueransim_gnb_amf_address }}"
    GNB_SLICES_SST = "{{ one_ueransim_gnb_slices_sst }}"
    GNB_SLICES_SD = "{{ one_ueransim_gnb_slices_sd }}"
    UE_SUPI = "{{ one_ueransim_ue_supi }}"
    UE_MCC = "{{ one_ueransim_ue_mcc }}"
    UE_MNC = "{{ one_ueransim_ue_mnc }}"
    UE_KEY = "{{ one_ueransim_ue_key }}"
    UE_OP = "{{ one_ueransim_ue_op }}"
    UE_GNBSEARCHLIST = "{{ one_ueransim_ue_gnbSearchList }}"
    UE_SESSION_APN = "{{ one_ueransim_ue_session_apn }}"
    UE_SESSION_SST = "{{ one_ueransim_ue_session_sst }}"
    UE_SESSION_SD = "{{ one_ueransim_ue_session_sd }}"
    UE_CONFIGURED_NSSAI_SST = "{{ one_ueransim_ue_configured_nssai_sst }}"
    UE_CONFIGURED_NSSAI_SD = "{{ one_ueransim_ue_configured_nssai_sd }}"
    UE_DEFAULT_NSSAI_SST = "{{ one_ueransim_ue_default_nssai_sst }}"
    UE_DEFAULT_NSSAI_SD = "{{ one_ueransim_ue_default_nssai_sd }}"
  }

{# ### Disabled the possibility to modify VM's size due to a Terraform OpenNebula Provider's error
  disk {
    image_id = {{ site_available_components.ueransim.image_id }}
    size     = {{ one_ueransim_disk }}
    target   = "vda"
    driver   = "qcow2"
  } #}


{% for network in one_ueransim_networks %}
  nic {
    model           = "virtio"
    network_id      = opennebula_virtual_network.{{ network }}.id
  }
{% endfor %}

  depends_on = [ opennebula_virtual_network_address_range.tn_vxlan ]
}

output "{{ entity_name }}-id" {
  description = "OpenNebula VM ID"
  value = opennebula_virtual_machine.{{ entity_name }}.id
}

output "{{ entity_name }}-ips" {
  description = "OpenNebula VM Network Assignments"
  value = { for nic in opennebula_virtual_machine.{{ entity_name }}.nic[*] : nic.network_id => nic.computed_ip }
}
