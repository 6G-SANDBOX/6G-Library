resource "opennebula_virtual_machine" "{{ tn_id }}-{{ one_component_name }}" {
  name        = "{{ tn_id }}-{{ one_component_name }}"
  description = "{{ tn_id }} UERANSIM"
  template_id = {{ site_one_templates.vm_m.id }}
  #group       = "oneadmin"
  #permissions = "660"

  context = {
    SET_HOSTNAME = "$NAME"
    {{ 'USERNAME = "{}"'.format(lookup('env', 'one_vm_username'))       if lookup('env', 'one_vm_username') is not none else '' }}
    {{ 'PASSWORD = "{}"'.format(lookup('env', 'one_vm_password'))       if lookup('env', 'one_vm_password') is not none else '' }}
    {{ 'SSH_PUBLIC_KEY = "{}"'.format(lookup('env', 'one_vm_ssh_key'))  if lookup('env', 'one_vm_ssh_key') is not none else '' }}
    # comes from site. STEPS: 1.creates ssh rsa key for the VM (necessary? ed25519 type better) 2.allows ssh with password (should only be done if password is provided) 3. writes ssh public key from jenkins in /root/.ssh/authorized_keys (should be defined in SSH_PUBLIC_KEY context value)
    {{ 'START_SCRIPT_BASE64 = "{}"'.format(lookup('env', 'site_jenkins_script_base64')) if lookup('env', 'site_jenkins_script_base64') is not none else '' }}

    ### UERANSIM variables
    {{ 'RUN_GNB = "{}"'.format(lookup('env', 'run_gnb'))        if lookup('env', 'run_gnb') is not none else '' }}
    {{ 'RUN_UE = "{}"'.format(lookup('env', 'run_ue'))          if lookup('env', 'run_ue') is not none else '' }}

    {{ 'GNB_AMF_ADDRESS = "{}"'.format(lookup('env', 'gnb_amf_address')) if lookup('env', 'gnb_amf_address') is not none else '' }}
    {{ 'GNB_GTPIP = "{}"'.format(lookup('env', 'gnb_gtpIp'))             if lookup('env', 'gnb_gtpIp') is not none else '' }}
    {{ 'GNB_LINKIP = "{}"'.format(lookup('env', 'gnb_linkIp'))           if lookup('env', 'gnb_linkIp') is not none else '' }}
    {{ 'GNB_MCC = "{}"'.format(lookup('env', 'gnb_mcc'))                 if lookup('env', 'gnb_mcc') is not none else '' }}
    {{ 'GNB_MNC = "{}"'.format(lookup('env', 'gnb_mnc'))                 if lookup('env', 'gnb_mnc') is not none else '' }}
    {{ 'GNB_NGAPIP = "{}"'.format(lookup('env', 'gnb_ngapIp'))           if lookup('env', 'gnb_ngapIp') is not none else '' }}
    {{ 'GNB_SLICES_SD = "{}"'.format(lookup('env', 'gnb_slices_sd'))     if lookup('env', 'gnb_slices_sd') is not none else '' }}
    {{ 'GNB_SLICES_SST = "{}"'.format(lookup('env', 'gnb_slices_sst'))   if lookup('env', 'gnb_slices_sst') is not none else '' }}
    {{ 'GNB_TAC = "{}"'.format(lookup('env', 'gnb_tac'))                 if lookup('env', 'gnb_tac') is not none else '' }}

    {{ 'UE_CONFIGURED_NSSAI_SD = "{}"'.format(lookup('env', 'ue_configured_nssai_sd'))   if lookup('env', 'ue_configured_nssai_sd') is not none else '' }}
    {{ 'UE_CONFIGURED_NSSAI_SST = "{}"'.format(lookup('env', 'ue_configured_nssai_sst')) if lookup('env', 'ue_configured_nssai_sst') is not none else '' }}
    {{ 'UE_DEFAULT_NSSAI_SD = "{}"'.format(lookup('env', 'ue_default_nssai_sd'))         if lookup('env', 'ue_default_nssai_sd') is not none else '' }}
    {{ 'UE_DEFAULT_NSSAI_SST = "{}"'.format(lookup('env', 'ue_default_nssai_sst'))       if lookup('env', 'ue_default_nssai_sst') is not none else '' }}
    {{ 'UE_GNBSEARCHLIST = "{}"'.format(lookup('env', 'ue_gnbSearchList'))               if lookup('env', 'ue_gnbSearchList') is not none else '' }}
    {{ 'UE_KEY = "{}"'.format(lookup('env', 'ue_key'))                                   if lookup('env', 'ue_key') is not none else '' }}
    {{ 'UE_MCC = "{}"'.format(lookup('env', 'ue_mcc'))                                   if lookup('env', 'ue_mcc') is not none else '' }}
    {{ 'UE_MNC = "{}"'.format(lookup('env', 'ue_mnc'))                                   if lookup('env', 'ue_mnc') is not none else '' }}
    {{ 'UE_OP = "{}"'.format(lookup('env', 'ue_op'))                                     if lookup('env', 'ue_op') is not none else '' }}
    {{ 'UE_SESSION_APN = "{}"'.format(lookup('env', 'ue_session_apn'))                   if lookup('env', 'ue_session_apn') is not none else '' }}
    {{ 'UE_SESSION_SD = "{}"'.format(lookup('env', 'ue_session_sd'))                     if lookup('env', 'ue_session_sd') is not none else '' }}
    {{ 'UE_SESSION_SST = "{}"'.format(lookup('env', 'ue_session_sst'))                   if lookup('env', 'ue_session_sst') is not none else '' }}
    {{ 'UE_SUPI = "{}"'.format(lookup('env', 'ue_supi'))                                 if lookup('env', 'ue_supi') is not none else '' }}
    
  }


{% for network_id in one_component_networks %}
  nic {
    model           = "virtio"
    network_id      = {{ network_id }}
    # security_groups = [0]  # Commented because ONE terraform provider has a bug  
  }
{% endfor %}
}

output "{{ one_component_name }}_network_assignments" {
  description = "OpenNebula VM Network Assignments"
  value = { for nic in opennebula_virtual_machine.{{ tn_id }}-{{ one_component_name }}.nic[*] : nic.network_id => nic.computed_ip }
}

output "{{ one_component_name }}_VM_ID" {
  description = "OpenNebula VM ID"
  value = opennebula_virtual_machine.{{ tn_id }}-{{ one_component_name }}.id
}
