---
- name: "STAGE 1: Prepare to access a previous target component"
  hosts: localhost
  gather_facts: false
  connection: local  
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips'][site_networks_id.default | string] }}"
        node_ips: "{{ (terraform_outputs.stdout | from_json)[one_onemnef_oneKE + '-node_ips'] }}"

    - name: Add the oneKE master to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ one_onemnef_oneKE }}-master_0"
        ansible_host: "{{ node_ips.master_0 }}"
        ansible_ssh_common_args: "-J jenkins@{{ bastion_ip }},root@{{ node_ips.vnf_0 }}"
        ansible_user: "root"


- name: "DEBUG User and Password variables"
  hosts: "localhost"
  tasks:
    - name: Debug
      ansible.builtin.debug:
        msg: "Harbor User: {{ site_available_components.onemnef.harbor_user }} Harbor Password: {{ site_available_components.onemnef.harbor_password }}"


- name: "STAGE 2: Apply IaC to deploy the component"
  hosts: "{{ hostvars['localhost']['one_onemnef_oneKE'] }}-master_0"
  gather_facts: false
  tasks:
    - name: Load enviromental variables from different sources inside the component
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Helm install
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/all/cac/helm_install.yaml"

- name: "STAGE 3: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Define onemnef metadata dictionary
      ansible.builtin.set_fact:
        onemnef_metadata_dict: >-
          {
            'mqtt_host': '{{ mqtt_host }}',
            'mongodb_host': '{{ mongodb_host }}',
            'nwg_ingress_fqdn': '{{ nwg_ingress_fqdn }}',
            'sgw_host': '{{ sgw_host }}',
            'use_capif': '{{ use_capif }}',
            'capif_host': '{{ capif_host }}',
            'capif_http_port': '{{ capif_http_port }}',
            'capif_https_port': '{{ capif_https_port }}',
            'nrf_host': '{{ nrf_host }}',
            'nrf_port': '{{ nrf_port }}',
            'amf_host': '{{ amf_host }}',
            'amf_port': '{{ amf_port }}',
            'pcf_host': '{{ pcf_host }}',
            'pcf_port': '{{ pcf_port }}',
            'smf_host': '{{ smf_host }}',
            'smf_port': '{{ smf_port }}',
            'bsf_host': '{{ bsf_host }}',
            'bsf_port': '{{ bsf_port }}',
            'udm_host': '{{ udm_host }}',
            'udm_port': '{{ udm_port }}',
            'core_ip': '{{ core_ip }}',

          }


    - name: Publish onemnef metadata as terraform outputs"
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
      vars:
        custom_outputs:
          - key: "{{ entity_name }}-metadata"
            value: "{{ onemnef_metadata_dict }}"

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
      vars:
        output:
          onemnef_metadata_dict: "{{ onemnef_metadata_dict | b64encode }}"
