---
- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Prepare terraform manifests
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/iac_tasks/prepare_one.yaml"
      when: site_hypervisor == "one"

    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/iac/"
        state: "present"
        force_init: true
      ignore_errors: true
      register: terraform_apply


- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve terraform output
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/iac/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_output
      changed_when: false
      when: not terraform_apply.failed

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_output.stdout | from_json)['tn_bastion-ips']['0'] }}"
        ssh_public_key: "{{ (terraform_output.stdout | from_json)['ssh_public_key'] }}"
        id: "{{ (terraform_output.stdout | from_json)[entity_name + '-id'] }}"
        cluster_roles: "{{ (terraform_output.stdout | from_json)[entity_name + '-roles'] }}"
      when: not terraform_apply.failed

    - name: Fetch cluster node IDs
      ansible.builtin.set_fact:
        node_ids: "{{ node_ids | default({}) | combine({item.name: item.nodes[0]}) }}"
      loop: "{{ cluster_roles }}"
      when: item.nodes | length > 0

    - name: Fetch cluster node IPs
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/node_ip.yaml"
      loop: "{{ node_ids | dict2items }}"


    - name: Add new VMs to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ entity_name }}-{{ item.key }}"
        ansible_host: "{{ item.value }}"
        ansible_ssh_common_args: "-J root@{{ bastion_ip }}{% if item.key != 'vnf' %},root@{{ entity_name }}-vnf{% else %}{% endif %}"
      loop: "{{ node_ips | dict2items }}"

    - name: Add new VMs to SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/ssh_config.yaml"
      loop: "{{ node_ips | dict2items }}"

    - name: Fetch master metadata
      community.general.one_vm:
        instance_ids: "{{ node_ids.master | int }}"
      register: master_metadata
    - name: Extract kubeconfig file from master metadata
      ansible.builtin.set_fact:
        kubeconfig: "{{ master_metadata.instances[0].attributes.ONEKE_KUBECONFIG }}"

- name: "STAGE 3: Add public SSH key to new hosts"
  hosts: "{{ entity_name }}-vnf,{{ entity_name }}-master,{{ entity_name }}-worker"
  gather_facts: false
  tasks:
    - name: Set the tn_id ssh key as authorized in the nodes
      ansible.posix.authorized_key:
        user: root
        state: present
        key: "{{ ssh_public_key }}"

- name: "STAGE 4: Apply CAC to prepare the component"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Create kubeconfig
      ansible.builtin.copy:
        content: "{{ kubeconfig | b64decode }}"
        dest: "{{ workspace }}/{{ component_type }}/code//{{ entity_name }}.kubeconfig"
        mode: "644"

    - name: Find a free TCP port
      ansible.builtin.script:
        cmd: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/02_install/find_free_tcp_port.py"
        executable: /usr/bin/python3
      register: result_port

    - name: Verify if port is empty
      ansible.builtin.assert:
        that: result_port.stdout | length > 0
        fail_msg: "There is not empty port"


### CONTINUE HERE
    - name: Start SSH tunnel if is not open
      ansible.builtin.shell: "ssh -f -L {{ result_port.stdout | trim }}:localhost:6443 {{ entity_name }}-master -N"
      when: result_port.stdout | length > 0

    - name: Upload Kubeconfig to S3 before replacing port
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/03_post/kubeconfig_upload.yaml"

    # - ansible.builtin.set_fact:
    #     kubeconfig_content_decoded: "{{ hostvars[tn_id + '-oneke-' + service_name + '-master']['kubeconfig']['content'] | b64decode }}"

    # - ansible.builtin.set_fact:
    #     kubeconfig_content: "{{ hostvars[tn_id + '-oneke-' + service_name + '-master']['kubeconfig']['content'] }}"

    - name: Replace kubectl url endpoint
      ansible.builtin.replace:
        path: "{{ workspace }}/{{ component_type }}/private/{{ tn_id }}-oneke-{{ service_name }}.kubeconfig"
        regexp: "https://127.0.0.1:6443"
        replace: "https://127.0.0.1:{{ result_port.stdout | trim }}"

    - name: Post Actions ingress-nginx
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/02_install/install_nginx_controller.yaml"

    - name: Post Actions Skooner dashboard
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/02_install/install_skooner_dashboard.yaml"

    - name: Post Actions Longhorn dashboard
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/02_install/install_longhorn_dashboard.yaml"

    - name: Delete previous SSH tunnel
      ansible.builtin.shell: "bash {{ workspace }}/.global/scripts/kill_ssh_jenkins.sh {{ result_port.stdout | trim }}"
      ignore_errors: true

# STAGE 5: Generate Responses and save manifest a config files
- name: Finishing deployment
  hosts: localhost
  tasks:
    - name: Publish execution results
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_results_tasks.yaml"

    - name: Upload deployment manifest
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/upload_manifest_to_folder_tasks.yaml"
