---
- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  connection: local  
  tasks:
    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/.terraform/"
        state: "present"
        force_init: true
      ignore_errors: true
      register: terraform_apply

    - name: Check if terraform apply return code
      block:
        - name: Publish stderr terraform output to TNLCM
          ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/publish_ok_results.yaml"

        - name: Stop pipeline execution
          ansible.builtin.meta: end_play
      when: terraform_apply.failed


- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips']['0'] }}"
        ssh_public_key: "{{ (terraform_outputs.stdout | from_json)['ssh_public_key'] }}"
        id: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-id'] }}"
        cluster_roles: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-roles'] }}"

    - name: Fetch cluster node IDs
      ansible.builtin.set_fact:
        node_ids: >-
          {{
            node_ids | default({}) | combine({
              (item.0.name + '_' + item.0.nodes.index(item.1) | string): item.1 | string
            })
          }}
      loop: "{{ cluster_roles | subelements('nodes', skip_missing=True) }}"

    - name: Fetch cluster node IPs
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/node_ip.yaml"
      loop: "{{ node_ids | dict2items }}"

    - name: Add new VMs to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ entity_name }}-{{ item.key }}"
        ansible_host: "{{ item.value }}"
        ansible_ssh_common_args: "-J {{ site_jenkins_user }}@{{ bastion_ip }}{% if item.key.startswith('vnf') %},root@{{ node_ips.vnf_0 }}{% else %}{% endif %}"
        ansible_user: "root"
        groups: "{{ entity_name }}"
      loop: "{{ node_ips | dict2items }}"

    - name: Add new VMs to SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/ssh_config.yaml"
      loop: "{{ node_ips | dict2items }}"

    - name: Fetch master metadata
      community.general.one_vm:
        instance_ids: "{{ node_ids.master_0 | int }}"
      register: master_metadata
    - name: Extract kubeconfig file from master metadata
      ansible.builtin.set_fact:
        kubeconfig: "{{ master_metadata.instances[0].attributes.ONEKE_KUBECONFIG }}"

    - name: Create kubeconfig
      ansible.builtin.copy:
        content: "{{ kubeconfig | b64decode }}"
        dest: "{{ workspace }}/{{ component_type }}/code/{{ entity_name }}.kubeconfig"
        mode: "644"

- name: "STAGE 3: Apply CAC to prepare the component"
  hosts: "{{ hostvars['localhost']['entity_name'] }}"
  gather_facts: false
  tasks:
    - name: Set the tn_id ssh key as authorized in the nodes
      ansible.posix.authorized_key:
        user: root
        state: present
        key: "{{ hostvars['localhost']['ssh_public_key'] }}"

    - name: Apply extra Helm charts
      when: inventory_hostname == hostvars['localhost']['entity_name'] + '-master_0'
      block:
        - name: Apply ingress-nginx helm chart
          ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ hostvars['localhost']['site_hypervisor'] }}/cac/02_install/install_nginx_controller.yaml"

        - name: Apply Skooner helm chart
          ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ hostvars['localhost']['site_hypervisor'] }}/cac/02_install/install_skooner_dashboard.yaml"

        - name: Apply nginx Ingress for the longhorn dashboard
          ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ hostvars['localhost']['site_hypervisor'] }}/cac/02_install/install_longhorn_dashboard.yaml"
          when: hostvars['localhost']['one_k8s_longhorn']  == "YES"

- name: "STAGE 4: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Upload kubeconfig to S3
      amazon.aws.s3_object:
        endpoint_url: "{{ site_s3_server.endpoint }}"
        mode: put
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID')}}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY')}}"
        bucket: "{{ site_s3_server.bucket }}"
        object: "{{ tn_id }}/kconf-{{ entity_name }}.kubeconfig"
        src: "{{ workspace }}/{{ component_type }}/code/{{ entity_name }}.kubeconfig"
        encrypt: no

    - name: Publish node IDs and IPs as a terraform outputs"
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/custom_tf_outputs.yaml"
      vars:
        custom_outputs:
          - key: "{{ entity_name }}-node_ids"
            value: "{{ node_ids }}"
            description: "OpenNebula VM IDs from {{ entity_name }}"

          - key: "{{ entity_name }}-node_ips"
            value: "{{ node_ips }}"
            description: "VM IPs from from {{ entity_name }}"

    - name: Merge all component component outputs into one "output" variable
      ansible.builtin.set_fact:
        output:
          id: "{{ id | b64encode }}"
          cluster_roles: "{{ cluster_roles | b64encode }}"
          node_ids: "{{ node_ids | b64encode }}"
          node_ips: "{{ node_ips | b64encode }}"
          kubeconfig: "{{ kubeconfig | b64encode }}"
          skooner_token: "{{ hostvars[entity_name + '-master']['skooner_token']['stdout'] | b64encode }}"

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/publish_ok_results.yaml"

    - name: Upload markdown info to S3 storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/s3_upload.yaml"
