# START MANDATORY BLOCK
- name: Generate installation manifest from templates
  hosts: localhost
  gather_facts: true
  tasks: 
    - name: Mix variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/mix_variables_tasks.yaml"
    - name: 'Add bastion hosts to be able to jump'
      ansible.builtin.add_host:
        name: "{{ tn_id }}-tn-bastion"      
# END MANDATORY BLOCK

# STAGE 1: Prepare manifest from templates
- name: Generate installation manifest from templates
  hosts: localhost
  tasks: 
    - name: Generate installation manifest from templates
      ansible.builtin.include_tasks: "./{{ site_hypervisor }}/prepare.yaml"

# STAGE 2: Execute manifest
- name: Infrastructure Tasks
  hosts: localhost
  tasks:
    - name: Download Terraform manifest from previos TN components
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/download_bucket_content_tasks.yaml" 
          
    - name: Execute terraform apply
      community.general.terraform:
        project_path: "./{{ site_hypervisor }}/iac/"
        state: "present"
        force_init: true
      register: result 
    
    - name: Terraform DEBUG
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Get Terraform Output
      ansible.builtin.shell:
      args:
        chdir: "./{{ site_hypervisor }}/iac/"
        cmd: "terraform output --json | jq 'with_entries(.value |= .value)'"
      register: terraform_output

    - name: Load Terraform Output into execution context
      ansible.builtin.set_fact:
        outputs: "{{ terraform_output.stdout | from_json }}"

    - name: Terraform DEBUG
      ansible.builtin.debug:
        msg: "{{ outputs['maci-oneke-maci_roles'] }}"

    # - name: Execute Python Script using the script module
    #   ansible.builtin.script:
    #     cmd: "{{ workspace }}/.global/scripts/get_vm_ids_from_roles.py '{{ outputs['maci-oneke-maci_roles'] | to_json }}' '{{ site_jenkins_ssh_public_key }}' 2>/dev/null"
    #     executable: /usr/bin/python3
    #   register: result_rsa

    # - debug:
    #     msg: "{{ result_rsa.stdout | from_json }}"

    # - name: Execute Python Script using the script module
    #   ansible.builtin.script:
    #     cmd: "{{ workspace }}/.global/scripts/get_ips_from_roles.py {{ outputs['maci-oneke-maci_roles'] }}"
    #     executable: /usr/bin/python3
    #   register: result2

    # - debug:
    #     msg: "{{ result2 }}"      

    # - name: Add new VM to Ansible Inventory
    #   ansible.builtin.add_host:
    #     hostname: "{{ tn_id }}-oneke-{{ service_name }}-{{ item.key }}"
    #     ansible_user: "root"
    #     ansible_password: "UMAPass1"
    #   loop: "{{ result2.stdout | dict2items }}"

    # - name: Create SSH config file into Jenkins
    #   ansible.builtin.include_tasks: "./{{ site_hypervisor }}/cac/03_post/create_ssh_config_file.yaml"    
    #   vars:
    #     tn_id: "{{ tn_id}}"
    #     service_name: "{{ service_name }}"
    #     role: "{{ item.key }}"
    #     ip: "{{ item.value }}"
    #   loop: "{{ result2.stdout | dict2items }}"

# STAGE 2: Execute manifest
- name: Infrastructure Tasks
  hosts: "{{ hostvars['localhost']['tn_id'] }}-oneke-{{ hostvars['localhost']['service_name'] }}-master"
  gather_facts: true
  tasks:
    - name: Return motd to registered var
      ansible.builtin.command: cat /etc/hostname
      register: hostna
    - debug:
        msg: "{{ hostna }}"  

#     - name: Get VM ip from default site network
#       ansible.builtin.set_fact:
#         vm_ip: "{{ item.value }}"
#       loop: "{{ lookup('ansible.builtin.dict', outputs[one_component_name + \"_network_assignments\"], wantlist=True) }}"
#       when: item.key | int == one_component_networks[0]

#     - name: Verify that is correctly loaded
#       ansible.builtin.debug:
#         msg: "Network Interface {{ vm_ip | default('----')}}"

#     - name: Add new VM to Ansible Inventory
#       ansible.builtin.add_host:
#         hostname: "{{ tn_id }}-{{ one_component_name }}"
#         ansible_user: "root"

#     - name: Create SSH config file into Jenkins
#       ansible.builtin.include_tasks: "./{{ site_hypervisor }}/cac/03_post/create_ssh_config_file.yaml"        

# # STAGE 3: Execute manifest
# - name: Wait for VM ready from jenkins jumping through TN Bastion
#   hosts: localhost
#   tasks:
#     - name: Try SSH - Wait for contextualization ready
#       shell: "ssh {{ tn_id }}-{{ one_component_name }} ls"
#       register: test
#       until: "test is not failed"
#       retries: 10
#       delay: 20
  
# # STAGE 4: Execute manifest
# - name: Infrastructure Tasks
#   hosts: "{{ hostvars['localhost']['tn_id'] }}-{{ hostvars['localhost']['one_component_name'] }}"
#   gather_facts: true
#   tasks:
#     - name: Load Variables into new VM
#       ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/mix_variables_tasks.yaml"

#     - command: "cat /etc/hostname"
#       register: hostname_out

#     - name: "DEBUG" 
#       ansible.builtin.debug:
#         msg: "{{ hostname_out | to_json }}"

# # STAGE 5: Execute manifest
# - name: Infrastructure Tasks
#   hosts: localhost
#   tasks:
#     - name: Publish execution results
#       ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_results_tasks.yaml"

#     - name: Upload Terraform manifest
#       ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/upload_manifest_to_folder_tasks.yaml"
#       when: not result.failed   