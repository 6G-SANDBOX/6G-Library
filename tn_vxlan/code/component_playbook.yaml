---
- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Prepare terraform manifests
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/prepare_one_iac.yaml"
      when: site_hypervisor == "one"

    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/{{ library_component_name }}/code/{{ site_hypervisor }}/iac/"
        state: "present"
        force_init: true
      ignore_errors: true
      register: terraform_apply


- name: "STAGE 2: Publish execution results"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve terraform output
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/{{ library_component_name }}/code/{{ site_hypervisor }}/iac/"
        cmd: "set -o pipefail && terraform output --json"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_output
      changed_when: false
      when: not terraform_apply.failed

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        tn_vxlan_id: "{{ (terraform_output.stdout | from_json)['tn_vxlan-id'].value }}"
      when: not terraform_apply.failed

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/publish_results.yaml"

    - name: Upload markdown info to S3 storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/s3_upload.yaml"
      when: not terraform_apply.failed
