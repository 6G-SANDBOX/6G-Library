---
- name: "STAGE 1: Prepare to access a previous target component"
  hosts: localhost
  gather_facts: false
  connection: local  
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips']['0'] }}"
        node_ips: "{{ (terraform_outputs.stdout | from_json)[one_open5gs_k8s + '-node_ips'] }}"

    - name: Add the k8s master to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ one_open5gs_k8s }}-master_0"
        ansible_host: "{{ node_ips.master_0 }}"
        ansible_ssh_common_args: "-J {{ site_jenkins_ssh_user }}@{{ bastion_ip }},root@{{ node_ips.vnf_0 }}"
        ansible_user: "root"

- name: "STAGE 2: Apply IAC to deploy the component"
  hosts: "{{ hostvars['localhost']['one_open5gs_k8s'] }}-master_0"
  gather_facts: false
  tasks:
    - name: Load enviromental variables from different sources inside the component
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Helm install
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/all/cac/helm_install.yaml"

- name: "STAGE 3: Publish execution results"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Publish open5gs metadata as terraform outputs"
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/custom_tf_outputs.yaml"
      vars:
        custom_outputs:
          - key: "{{ entity_name }}-k8s"
            value: "{{ one_open5gs_k8s }}"
          - key: "{{ entity_name }}-proxy"
            value: "{{ node_ips.vnf_0 }}"
          - key: "{{ entity_name }}-mcc"
            value: "{{ one_open5gs_mcc }}"
          - key: "{{ entity_name }}-mnc"
            value: "{{ one_open5gs_mnc }}"
          - key: "{{ entity_name }}-msin"
            value: "{{ one_open5gs_msin }}"
          - key: "{{ entity_name }}-key"
            value: "{{ one_open5gs_key }}"
          - key: "{{ entity_name }}-opc"
            value: "{{ one_open5gs_opc }}"
          - key: "{{ entity_name }}-apn"
            value: "{{ one_open5gs_apn }}"
          - key: "{{ entity_name }}-tac"
            value: "{{ one_open5gs_tac }}"
          - key: "{{ entity_name }}-s_nssai_sst"
            value: "{{ one_open5gs_s_nssai_sst }}"
          - key: "{{ entity_name }}-s_nssai_sd"
            value: "{{ one_open5gs_s_nssai_sd }}"
          - key: "{{ entity_name }}-amf_ip"
            value: "{{ one_open5gs_amf_ip }}"
          - key: "{{ entity_name }}-upf_ip"
            value: "{{ one_open5gs_upf_ip }}"

    - name: Merge all component component outputs into one "output" variable
      ansible.builtin.set_fact:
        output:
          proxy: "{{ node_ips.vnf_0 | b64encode }}"
          mcc: "{{ one_open5gs_mcc | b64encode }}"
          mnc: "{{ one_open5gs_mnc | b64encode }}"
          msin: "{{ one_open5gs_msin | b64encode }}"
          key: "{{ one_open5gs_key | b64encode }}"
          opc: "{{ one_open5gs_opc | b64encode }}"
          apn: "{{ one_open5gs_apn | b64encode }}"
          tac: "{{ one_open5gs_tac | b64encode }}"
          s_nssai_sst: "{{ one_open5gs_s_nssai_sst | b64encode }}"
          s_nssai_sd: "{{ one_open5gs_s_nssai_sd | b64encode }}"
          amf_ip: "{{ one_open5gs_amf_ip | b64encode }}"
          upf_ip: "{{ one_open5gs_upf_ip | b64encode }}"

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
