---
- name: "STAGE 1: Apply IAC to deploy the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Prepare terraform working directory
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_workdir.yaml"

    - name: Terraform apply
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/terraform_apply.yaml"

    # ### EXCEPTIONALLY AND DUE TO A TERRAFORM PROVIDER LIMITATION, THIS COMPONENT NEEDS TO BE DEPLOYED WITH ANSIBLE INSTEAD OF TERRAFORM
    # ### BREAKING CONFIGURATION AS CODE IS DISCOURAGED
    # # https://docs.ansible.com/ansible/latest/collections/community/general/one_vm_module.html
    # - name: "(TEMPORARY) Deploy component with ansible instead of terraform"
    #   community.general.one_vm:
    #     api_url: "{{ lookup('ansible.builtin.env', 'OPENNEBULA_ENDPOINT') }}"
    #     api_username: "{{ lookup('ansible.builtin.env', 'OPENNEBULA_USERNAME') }}"
    #     api_password: "{{ lookup('ansible.builtin.env', 'OPENNEBULA_PASSWORD') }}"
    #     attributes:
    #       name: "{{ tn_id }}-{{ entity_name }}"
    #     template_id: "{{ site_available_components.loadcore_agent.template_id }}"
    #     disk_size: "{{ one_loadcore_agent_disk }} MB"
    #     cpu: "{{ one_loadcore_agent_cpu }}"
    #     vcpu: "{{ one_loadcore_agent_cpu }}"
    #     memory: "{{ one_loadcore_agent_memory }} MB"
    #     updateconf:
    #       CONTEXT:
    #         NETWORK: "YES"
    #         SET_HOSTNAME: "$NAME"
    #         USERNAME: "jenkins"
    #     networks: "{{ one_loadcore_agent_networks | map('regex_replace', '^(.+)$', '{\"NETWORK\": \"' + tn_id + '-\\1\"}') | map('from_json') | list }}"
    #   register: created_vm

    # - name: "(TEMPORARY) Debug VM metadata"
    #   ansible.builtin.debug:
    #     var: created_vm
    #   when: debug


- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Retrieve terraform outputs
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/.terraform/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_outputs
      changed_when: false

    - name: Set Terraform outputs as playbook facts
      ansible.builtin.set_fact:
        bastion_ip: "{{ (terraform_outputs.stdout | from_json)['tn_bastion-ips'][site_networks_id.default | string] }}"
        tn_ssh_public_key: "{{ (terraform_outputs.stdout | from_json)['tn_ssh_public_key'] }}"
        tn_dns_token: "{{ (terraform_outputs.stdout | from_json)['tn_dns_token'] }}"
        ips: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-ips'] }}"
        id: "{{ (terraform_outputs.stdout | from_json)[entity_name + '-id'] }}"
        access_vnet_id: "{{ (terraform_outputs.stdout | from_json)[one_loadcore_agent_networks[0] + '-id'] | string }}"
        domain_name: >-
          {{
            (
              (component_type  | regex_replace('_', '') | lower) ~ '-' ~
              (custom_name     | regex_replace('_', '') | lower) ~ '.' ~
              (tn_id           | regex_replace('_', '') | lower) ~ '.' ~
              site_domain
            ) | trim
          }}

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "loadcore_agent"
        ansible_host: "{{ ips[access_vnet_id] }}"
        ansible_ssh_common_args: "-J jenkins@{{ bastion_ip }}"
        ansible_user: "jenkins"

    - name: Add tn_bastion to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "bastion"
        ansible_host: "{{ bastion_ip }}"
        ansible_user: "jenkins"

    - name: Add new VM to SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/jenkins_ssh_config.yaml"

    - name: Add new VM to an SSH config file ment to be usable by the experimenter
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tnuser_ssh_config.yaml"


- name: "STAGE 3: Apply CAC to prepare the component"
  hosts: "loadcore_agent"
  gather_facts: false
  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        timeout: 200

    - name: Load enviromental variables from different sources
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/load_variables.yaml"

    - name: Set site ssh key as authorized in jenkins user
      ansible.posix.authorized_key:
        user: jenkins
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars['localhost'].get('site_admin_ssh_public_key', '') }}"
      when: item != ''

    - name: Create new user for experimenter access
      become: true
      ansible.builtin.user:
        name: tnuser
        shell: /bin/bash
        groups: sudo
        password: ''
    - name: Set TN ssh key as authorized in new user
      become: true
      ansible.posix.authorized_key:
        user: tnuser
        state: present
        key: "{{ item }}"
      loop:
        - "{{ hostvars['localhost'].get('tn_ssh_public_key', '') }}"

    - name: Remove user ixia
      ansible.builtin.user:
        name: ixia
        state: absent
        remove: true
      become: true
      when: not hostvars['localhost'].get('one_loadcore_agent_ixia', false)

    - name: Execute bash script to register the Agent with the Middleware
      ansible.builtin.shell: |
        set -o pipefail
        printf "{{ middleware_ip }}\neth0\ny\nn" | /opt/5gc-test-engine/agent-setup.sh
      args:
        executable: /bin/bash
      vars:
        middleware_ip: "{{ hostvars.localhost.site_available_components.loadcore_agent.loadcore_middleware_ip | default('') }}"
      become: true
      changed_when: false

- name: "STAGE 4: Access tn_bastion to set firewall exceptions"
  hosts: bastion
  gather_facts: false
  tasks:
    - name: Write firewall exception for the Loadcore Middleware
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/nftables_add.yaml"
      vars:
        fw_exceptions:
          - "{{ hostvars.localhost.site_available_components.loadcore_agent.loadcore_middleware_ip | default('') }}"


- name: "STAGE 5: Publish execution results"
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Set DNS record for the component
      ansible.builtin.uri:
        url: >-
          {{
            'http://' ~ bastion_ip ~ ':5380/api/zones/records/add?token=' ~ tn_dns_token ~
            '&domain=' ~ domain_name ~
            '&type=A&ptr=true&createPtrZone=true&ipAddress=' ~ ips[access_vnet_id] | trim
          }}
        method: POST
        body_format: json
        status_code: [200]

    - name: Publish execution results to TNLCM and S3 object storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_ok_results.yaml"
