---
- name: "STAGE 1: Apply IAC to deploy the component" 
  hosts: localhost
  gather_facts: false
  tasks: 
    - name: Prepare terraform manifests
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/iac_tasks/prepare_one.yaml"
      when: site_hypervisor == "one"

    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/iac/"
        state: "present"
        force_init: true
      ignore_errors: true
      register: terraform_apply


- name: "STAGE 2: Prepare to access the component"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve terraform output
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/iac/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_output
      changed_when: false
      when: not terraform_apply.failed

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        ips: "{{ (terraform_output.stdout | from_json)[entity_name + '-ips'] }}"
        id: "{{ (terraform_output.stdout | from_json)[entity_name + '-id'] }}"
      when: not terraform_apply.failed

    - name: Verify that the bastion access IP is correctly loaded
      ansible.builtin.debug:
        msg: "Network Main Interface is: {{ ips[one_bastion_reachable_network] | default('----') }}"

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ entity_name }}"
        ansible_host: "{{ ips[one_bastion_reachable_network] }}"

    - name: Create SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/01_pre/ssh_config.yaml"
      

- name: "STAGE 3: Apply CAC to prepare the component"
  hosts: "{{ hostvars['localhost']['entity_name'] }}"
  gather_facts: false
  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        delay: 20
        timeout: 180

    ### In theory, fact gathering is not needed for the component configuration
    # - name: Gather facts for first time
    #   ansible.builtin.setup:

    ### Calling tasks/load_variables.yaml is also unnecesary, as I can call localhost values with hostvars['localhost']['var_name'] or hostvars['localhost'].var_name"
    ### But it makes the code much MUCH cleaner with almost no extra latency
    - name: Load enviromental variables from different sources inside the component
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/load_variables.yaml"

    # TODO en config de otras VMs, crear el user (privilegiado o no) y accesible con esta ssh-key
    - name: Create an ed25519 ssh key pair to access the future Trial Network components
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/02_install/set_ssh_keypair.yaml"

    - name: Fetch VPN config
      ansible.builtin.include_tasks: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/cac/03_post/get_vpn_client_tunnel.yaml"
      when: site_hypervisor == "one"


- name: "STAGE 4: Publish execution results"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Set public SSH key as a terraform output"
      ansible.builtin.copy:
        content: |
          output "ssh_public_key" {
            description = "SSH Public Key"
            value       = "{{ hostvars[entity_name]['ssh_public_key']['content'] }}"
          }
        dest: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/iac/tf-ssh_public_key.tf"
      when: not terraform_apply.failed
    - name: Load output in .tfstate
      community.general.terraform:
        project_path: "{{ workspace }}/{{ component_type }}/code/{{ site_hypervisor }}/iac/"
        state: "present"
      ignore_errors: true
      when: not terraform_apply.failed

    - name: Merge all component component outputs into one "output" variable
      ansible.builtin.set_fact:
        output:
          ips: "{{ ips | b64encode }}"
          id: "{{ id | b64encode }}"
          vpn_client_tunnel: "{{ hostvars[entity_name]['client_tunnel']['content'] }}"
          ssh_public_key: "{{ hostvars[entity_name]['ssh_public_key']['content'] }}"
          ssh_private_key: "{{ hostvars[entity_name]['ssh_private_key']['content'] }}"
      when: not terraform_apply.failed

    - name: Publish execution results to TNLCM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/publish_results.yaml"

    - name: Upload markdown info to S3 storage
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/common_tasks/s3_upload.yaml"
      when: not terraform_apply.failed
