---
- name: "STAGE 1: Apply IAC to deploy the component" 
  hosts: localhost
  gather_facts: false
  tasks: 
    - name: Prepare terraform manifests
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/prepare_one_iac.yaml"
      when: site_hypervisor == "one"

    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/{{ library_component_name }}/code/{{ site_hypervisor }}/iac/"
        state: "present"
        force_init: true
      ignore_errors: true
      register: terraform_apply
  
- name: "STAGE 2: Publish execution results"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve terraform output
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/{{ library_component_name }}/code/{{ site_hypervisor }}/iac/"
        cmd: "set -o pipefail && terraform output --json | jq 'with_entries(.value |= .value)'"
        executable: /bin/bash
      register: terraform_output
      changed_when: false
      when: not terraform_apply.failed

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        ips: "{{ (terraform_output.stdout | from_json)['tn_bastion-ips'] }}"
        id: "{{ (terraform_output.stdout | from_json)['tn_bastion-id'] }}"
      when: not terraform_apply.failed

    - name: Verify that the bastion access IP is correctly loaded
      ansible.builtin.debug:
        msg: "Network Main Interface is: {{ ips[one_component_networks[0] | string] | default('----') }}"

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ library_component_name }}"
        ansible_host: "{{ ips[one_component_networks[0] | string] }}"

    - name: Create SSH config file in the Jenkins-master for debugging purposes
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/write_ssh_config.yaml"
      


    # - name: Wait for service to be ready
    #   wait_for:
    #     port: 22
    #     host: "{{ vm_ip }}"
    #     connect_timeout: 5
    #     delay: 20
    #     timeout: 240



- name: "STAGE 3: Apply CAC to prepare the component"
  hosts: "{{ library_component_name }}"
  gather_facts: false
  tasks:

    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        delay: 20
        timeout: 120
    
    - debug: var=hostvars[inventory_hostname]

    - name: Gather facts for first time
      ansible.builtin.setup:

    - debug: var=hostvars[inventory_hostname]

    - name: Load Variables into new VM
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/load_variables.yaml"

    - debug: var=hostvars[inventory_hostname]

    - command: "cat /etc/hostname"
      register: hostname_out

    - debug: msg="{{ hostname_out | to_json }}"

    - name: Execute Post Configuration   # This will fail
      ansible.builtin.include_tasks: "./{{ site_hypervisor }}/cac/03_post/get_vpn_client_config.yaml"
      when: "site_hypervisor == 'one'"

# STAGE 4: Execute manifest
- name: Results
  hosts: localhost
  tasks:
    - name: Publish execution results
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_results_tasks.yaml"

    - name: Upload Terraform manifest
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/upload_manifest_to_folder_tasks.yaml"



######## en config, crear el user para el experimenter