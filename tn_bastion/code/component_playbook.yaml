---
- name: "STAGE 1: Apply IAC to deploy the component" 
  hosts: localhost
  gather_facts: false
  tasks: 
    - name: Prepare terraform manifests
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/tasks/prepare_one_iac.yaml"
      when: site_hypervisor == "one"

    - name: Terraform apply
      community.general.terraform:
        project_path: "{{ workspace }}/tn_bastion/code/{{ site_hypervisor }}/iac/"
        state: "present"
        force_init: true
      ignore_errors: true
      register: terraform_apply

  
- name: "STAGE 2: Publish execution results"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve terraform output
      ansible.builtin.shell:
      args:
        chdir: "{{ workspace }}/tn_vxlan/code/{{ site_hypervisor }}/iac/"
        cmd: "set -o pipefail && terraform output --json"
        executable: /bin/bash
      register: terraform_output
      changed_when: false
      when: not terraform_apply.failed

    - debug: var=terraform_output

    ### execution will fail here

    - name: Set Terraform outputs as facts
      ansible.builtin.set_fact:
        tn_vxlan_id: "{{ (terraform_output.stdout | from_json)[tn_id + '-tn_vxlan-id'].value }}"
      when: not terraform_apply.failed


    - name: Get Terraform Output
      ansible.builtin.shell:
      args:
        chdir: "./{{ site_hypervisor }}/iac/"
        cmd: "terraform output --json | jq 'with_entries(.value |= .value)'"
      register: terraform_output
        
    - name: Load Terraform Output into execution context
      ansible.builtin.set_fact:
        outputs: "{{ terraform_output.stdout | from_json }}"

    - name: Get VM ip from default site network
      ansible.builtin.set_fact:
        vm_ip: "{{ item.value }}"
      loop: "{{ lookup('ansible.builtin.dict', outputs[one_bastion_name + \"-network_assignments\"], wantlist=True) }}"
      when: item.key | int == site_public_network_id

    - name: Verify that is correctly loaded
      ansible.builtin.debug:
        msg: "Network Interface {{ vm_ip }}"

    - name: Add new VM to Ansible Inventory
      ansible.builtin.add_host:
        hostname: "{{ tn_id }}-{{ one_bastion_name }}"
        ansible_ssh_host: "{{ vm_ip }}"
        ansible_ssh_port: "22"
        ansible_user: "root"
        #ansible_ssh_pass: "ansible"

    - name: Create SSH config file into Jenkins
      ansible.builtin.include_tasks: "./{{ site_hypervisor }}/cac/03_post/create_ssh_config_file.yaml"

    - name: Wait for service to be ready
      wait_for:
        port: 22
        host: "{{ vm_ip }}"
        connect_timeout: 5
        delay: 20
        timeout: 240

# STAGE 3: Execute manifest
- name: Infrastructure Tasks
  hosts: "{{ hostvars['localhost']['tn_id'] }}-{{ hostvars['localhost']['one_bastion_name'] }}"
  gather_facts: true
  tasks:
    - name: Load Variables into new VM Bastion
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/mix_variables_tasks.yaml"
    - name: Execute Post Configuration
      ansible.builtin.include_tasks: "./{{ site_hypervisor }}/cac/03_post/get_vpn_client_config.yaml"
      when: "site_hypervisor == 'one'"

# STAGE 4: Execute manifest
- name: Results
  hosts: localhost
  tasks:
    - name: Publish execution results
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/publish_results_tasks.yaml"

    - name: Upload Terraform manifest
      ansible.builtin.include_tasks: "{{ workspace }}/.global/cac/upload_manifest_to_folder_tasks.yaml"
  